// Copyright 2021. The Tari Project
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
// this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
// this list of conditions and the following disclaimer in the documentation
// and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its contributors
// may be used to endorse or promote products derived from this software without
// specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
syntax = "proto3";

package tari.dan.rpc;

import "common.proto";
import "consensus.proto";
import "network.proto";
import "transaction.proto";

enum Status {
  Accepted = 0;
  Errored = 1;
}

message InvokeReadMethodRequest {
  bytes contract_id = 1;
  uint32 template_id = 2;
  string method = 3;
  bytes args = 4;
  bytes sender = 5;
}

message InvokeReadMethodResponse {
  bytes result = 1;
}

message InvokeMethodRequest {
  bytes contract_id = 1;
  uint32 template_id = 2;
  string method = 3;
  bytes args = 4;
  bytes sender = 5;
}

message InvokeMethodResponse {
  bytes result = 1;
  Status status = 2;
}

message GetIdentityRequest {}

message GetIdentityResponse {
  bytes public_key = 1;
  string public_address = 2;
  bytes node_id = 3;
}

message SubmitTransactionRequest {
  tari.dan.transaction.Transaction transaction = 1;
}

message SubmitTransactionResponse {
  bytes transaction_id = 1;
}

message GetPeersRequest {
  uint64 since = 1;
}

message GetPeersResponse {
  bytes identity = 1;
  repeated tari.dan.network.PeerIdentityClaim claims = 2;
}

message VnStateSyncRequest {
  tari.dan.common.SubstateAddress start_address = 1;
  tari.dan.common.SubstateAddress end_address = 2;
  repeated tari.dan.common.SubstateAddress inventory = 3;
}

message VnStateSyncResponse {
  bytes address = 1;
  uint32 version = 2;
  bytes substate = 3;

  uint64 created_epoch = 4;
  uint64 created_height = 5;
  bytes created_block = 6;
  bytes created_transaction = 7;
  bytes created_justify = 8;

  tari.dan.common.Epoch destroyed_epoch = 9;
  bytes destroyed_block = 10;
  bytes destroyed_transaction = 11;
  bytes destroyed_justify = 12;
}

message GetSubstateRequest {
  tari.dan.transaction.SubstateRequirement substate_requirement = 1;
}

message GetSubstateResponse {
  bytes address = 1;
  uint32 version = 2;
  // Encoded Substate
  bytes substate = 3;
  bytes created_transaction_hash = 4;
  SubstateStatus status = 5;
  repeated tari.dan.consensus.QuorumCertificate quorum_certificates = 6;
  bytes destroyed_transaction_hash = 7;
}

enum SubstateStatus {
  DoesNotExist = 0;
  Up = 1;
  Down = 2;
}

message GetTransactionResultRequest {
  bytes transaction_id = 1;
}

message GetTransactionResultResponse {
  PayloadResultStatus status = 1;
  bytes execution_result = 2;
  tari.dan.consensus.Decision final_decision = 3;
  string abort_details = 4;
  uint64 finalized_time_ms = 5;
  uint64 execution_time_ms = 6;
}

enum PayloadResultStatus {
  Pending = 0;
  Finalized = 1;
}

// Minimal substate data
message SubstateData {
  bytes substate_id = 1;
  uint32 version = 2;
  oneof substate_value_or_hash {
    bytes value = 3;
    bytes hash = 4;
  }
  bytes created_transaction = 7;
}

message SubstateUpdate {
  oneof update {
    SubstateCreatedProof create = 1;
    SubstateDestroyedProof destroy = 2;
  }
}

message SubstateCreatedProof {
  SubstateData substate = 1;
  //  tari.dan.consensus.QuorumCertificate created_justify = 2;
}

message SubstateDestroyedProof {
  bytes substate_id = 1;
  uint32 version = 2;
  //  tari.dan.consensus.QuorumCertificate destroyed_justify = 3;
  bytes destroyed_by_transaction = 4;
}

message SyncBlocksRequest {
  // Optional (empty for None). Must be provided if the epoch is not provided
  bytes start_block_id = 1;
  // Optional - If start_block_id is provided, this is ignored. Must be provided if start_block_id is not provided. 
  // In which case, start block is implicitly the first block of the epoch.
  tari.dan.common.Epoch epoch = 2;
  // If true, QCs will be streamed.
  bool stream_qcs = 3;
  // Weather to stream all substates, only transaction receipts or do not stream any substates
  StreamSubstateSelection stream_substates = 4;
  // If true, transactions in the block will be streamed
  bool stream_transactions = 5;
}

// Clippy complains about too many bools and prefers an enum
enum StreamSubstateSelection {
  No = 0;
  All = 1;
  TransactionReceiptsOnly = 2;
}

message SyncBlocksResponse {
  oneof sync_data {
    tari.dan.consensus.Block block = 1;
    QuorumCertificates quorum_certificates = 2;
    uint32 substate_count = 3;
    SubstateUpdate substate_update = 4;
    uint32 transaction_count = 5;
    tari.dan.transaction.Transaction transaction = 6;
    uint32 transaction_receipt_count = 7;
    SubstateCreatedProof transaction_receipt = 8;
  }
}

message QuorumCertificates {
  repeated tari.dan.consensus.QuorumCertificate quorum_certificates = 1;
}

message GetHighQcRequest {}

message GetHighQcResponse {
  tari.dan.consensus.QuorumCertificate high_qc = 1;
}

message GetCheckpointRequest {
  uint64 current_epoch = 1;
}

message GetCheckpointResponse {
  EpochCheckpoint checkpoint = 1;
}

message EpochCheckpoint {
  tari.dan.consensus.Block block = 1;
  repeated tari.dan.consensus.QuorumCertificate qcs = 2;
  map<uint32, bytes> shard_roots = 3;
}

message SyncStateRequest {
  uint64 start_epoch = 1;
  uint32 start_shard = 2;
  uint64 start_seq = 3;
  // The shard in the current shard-epoch that is requested.
  // This will limit the state transitions returned to those that fall within this shard-epoch.
  uint64 current_epoch = 4;
}

message SyncStateResponse {
  repeated StateTransition transitions = 1;
}

message StateTransition {
  StateTransitionId id = 1;
  SubstateUpdate update = 2;
}

message StateTransitionId {
  uint64 epoch = 1;
  uint32 shard = 2;
  uint64 seq = 3;
}

enum TemplateType {
  Wasm = 0;
  Manifest = 1;
  Flow = 2;
}

message SyncTemplatesRequest {
  repeated bytes addresses = 1;
}

message SyncTemplatesResponse {
  bytes address = 1;
  bytes author_public_key = 2;
  TemplateType template_type = 3;
  string template_name = 4;
  bytes binary = 5;
}